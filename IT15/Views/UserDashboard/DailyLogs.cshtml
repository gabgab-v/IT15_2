@model IT15.ViewModels.UserDashboardViewModel
@using System.Collections.Generic
@using System.Globalization
@using System.Linq

@{
    ViewData["Title"] = "My Attendance";

    var monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Model.SelectedMonth);
    var years = (Model.AvailableYears != null && Model.AvailableYears.Any())
        ? Model.AvailableYears.OrderBy(y => y).ToList()
        : new List<int> { Model.SelectedYear };
    var statusFilters = (Model.AvailableStatusFilters != null && Model.AvailableStatusFilters.Any())
        ? Model.AvailableStatusFilters
        : new List<string> { "All", "Present", "Late", "Early Checkout", "Leave", "Absent", "Pending", "Weekend", "Upcoming" };
}

<div class="flex flex-col gap-6">
    <div class="flex flex-wrap items-center justify-between gap-4">
        <h2 class="text-2xl font-semibold text-gray-800">My Attendance</h2>

        <div class="flex flex-wrap gap-3 items-center">
            @if (!Model.HasCheckedInToday)
            {
                <form asp-action="CheckIn" method="post">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700 transition">
                        Check In
                    </button>
                </form>
            }
            else if (Model.HasCheckedOutToday)
            {
                <p class="bg-green-100 text-green-800 font-medium py-2 px-4 rounded-lg">
                    Attendance complete for today
                </p>
            }
            else if (!Model.CanCheckOutNow)
            {
                <p class="bg-yellow-100 text-yellow-800 font-medium py-2 px-4 rounded-lg">
                    You can check out after @Model.ScheduledEndTime
                </p>
            }
            else
            {
                <form asp-action="CheckOut" method="post">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="bg-red-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-red-700 transition">
                        Check Out
                    </button>
                </form>
            }
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-100 text-green-700 font-medium py-2 px-4 rounded-lg">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-100 text-red-700 font-medium py-2 px-4 rounded-lg">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
        <form asp-action="DailyLogs" method="get" class="flex flex-wrap items-end gap-4">
            <div>
                <label for="month" class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Month</label>
                <select id="month" name="month" class="mt-1 block w-36 rounded-md border-gray-300 text-sm shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                    @for (var m = 1; m <= 12; m++)
                    {
                        var isSelected = m == Model.SelectedMonth;
                        <option value="@m" selected="@isSelected">
                            @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)
                        </option>
                    }
                </select>
            </div>

            <div>
                <label for="year" class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Year</label>
                <select id="year" name="year" class="mt-1 block w-28 rounded-md border-gray-300 text-sm shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                    @foreach (var yr in years)
                    {
                        var isSelected = yr == Model.SelectedYear;
                        <option value="@yr" selected="@isSelected">@yr</option>
                    }
                </select>
            </div>

            <div>
                <label for="statusFilter" class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Status</label>
                <select id="statusFilter" name="statusFilter" class="mt-1 block w-44 rounded-md border-gray-300 text-sm shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                    @foreach (var option in statusFilters)
                    {
                        var isSelected = option.Equals(Model.SelectedStatusFilter ?? "All", StringComparison.OrdinalIgnoreCase);
                        <option selected="@isSelected" value="@option">@option</option>
                    }
                </select>
            </div>

            <div class="flex items-center gap-3 pt-6">
                <button type="submit" class="bg-blue-600 text-white text-sm font-medium py-2 px-4 rounded-lg hover:bg-blue-700 transition">
                    Apply Filters
                </button>
                <a asp-action="DailyLogs" class="text-sm text-gray-600 hover:text-gray-800">
                    Reset
                </a>
            </div>
        </form>

        <div class="mt-4 flex flex-wrap gap-4 text-xs text-gray-600">
            <div class="flex items-center gap-2">
                <span class="h-3 w-3 rounded-full border border-green-400 bg-green-200"></span>
                Present
            </div>
            <div class="flex items-center gap-2">
                <span class="h-3 w-3 rounded-full border border-yellow-400 bg-yellow-200"></span>
                Late
            </div>
            <div class="flex items-center gap-2">
                <span class="h-3 w-3 rounded-full border border-red-400 bg-red-200"></span>
                Absent
            </div>
            <div class="flex items-center gap-2">
                <span class="h-3 w-3 rounded-full border border-blue-400 bg-blue-200"></span>
                Leave / Early Checkout
            </div>
            <div class="flex items-center gap-2">
                <span class="h-3 w-3 rounded-full border border-orange-400 bg-orange-200"></span>
                Pending
            </div>
            <div class="flex items-center gap-2">
                <span class="h-3 w-3 rounded-full border border-gray-300 bg-gray-200"></span>
                Weekend
            </div>
            <div class="flex items-center gap-2">
                <span class="h-3 w-3 rounded-full border border-sky-400 bg-sky-200"></span>
                Upcoming
            </div>
        </div>

        <div class="mt-6 grid gap-6 lg:grid-cols-[2fr,1fr]">
            <div>
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-700">@monthName @Model.SelectedYear</h3>
                </div>

                <div class="grid grid-cols-7 gap-3 text-xs font-semibold uppercase tracking-wide text-gray-500">
                    <div class="text-center">Sun</div>
                    <div class="text-center">Mon</div>
                    <div class="text-center">Tue</div>
                    <div class="text-center">Wed</div>
                    <div class="text-center">Thu</div>
                    <div class="text-center">Fri</div>
                    <div class="text-center">Sat</div>
                </div>

                <div class="mt-2 grid grid-cols-7 gap-3">
                    @foreach (var day in Model.CalendarDays)
                    {
                        var baseClasses = "relative rounded-lg border p-3 min-h-[120px] flex flex-col justify-between cursor-pointer transition focus:outline-none";
                        var statusClass = day.Status switch
                        {
                            "Present" => "border-green-200 bg-green-50 text-green-700",
                            "Late" => "border-yellow-200 bg-yellow-50 text-yellow-700",
                            "Early Checkout" => "border-blue-200 bg-blue-50 text-blue-700",
                            "Leave" => "border-blue-200 bg-blue-50 text-blue-700",
                            "Absent" => "border-red-200 bg-red-50 text-red-700",
                            "Pending" => "border-orange-200 bg-orange-50 text-orange-700",
                            "Weekend" => "border-gray-200 bg-gray-100 text-gray-600",
                            "Upcoming" => "border-sky-200 bg-sky-50 text-sky-700",
                            _ => "border-gray-200 bg-white text-gray-600"
                        };

                        if (!day.IsCurrentMonth)
                        {
                            statusClass = "border-dashed border-gray-200 bg-white text-gray-400";
                        }

                        var opacityClass = day.IsFilteredOut ? "opacity-40" : string.Empty;
                        var todayHighlight = day.IsToday ? "today-card" : string.Empty;
                        var dayNumberClass = day.IsCurrentMonth ? "text-base font-semibold" : "text-base font-semibold text-gray-400";
                        var statusLabel = day.Status == "Other Month" ? string.Empty : day.Status;
                        var description = string.IsNullOrWhiteSpace(day.StatusDescription)
                            ? "No additional details."
                            : day.StatusDescription;

                        <div class="@($"{baseClasses} {statusClass} {opacityClass} {todayHighlight}")"
                             tabindex="0"
                             role="button"
                             data-calendar-day
                             data-status="@day.Status"
                             data-description="@description"
                             data-display-date="@day.Date.ToString("MMMM dd, yyyy")"
                             data-is-current="@day.IsCurrentMonth.ToString().ToLower()"
                             data-is-today="@day.IsToday.ToString().ToLower()">
                            <div class="flex items-start justify-between gap-2">
                                <span class="@dayNumberClass">@day.Date.Day</span>
                                @if (!string.IsNullOrWhiteSpace(statusLabel))
                                {
                                    <span class="text-[0.65rem] font-semibold uppercase tracking-wide">@statusLabel</span>
                                }
                            </div>
                            <p class="mt-3 text-xs text-gray-600 leading-relaxed">@description</p>
                        </div>
                    }
                </div>
            </div>

            <div class="border border-gray-200 rounded-lg p-5 bg-gray-50" data-detail-card>
                <h3 class="text-lg font-semibold text-gray-700">Day Details</h3>
                <p id="day-detail-date" class="mt-2 text-sm text-gray-600">Select a day to view more information.</p>
                <p id="day-detail-status" class="mt-4 text-sm font-semibold text-gray-700"></p>
                <p id="day-detail-description" class="mt-2 text-sm text-gray-600 leading-relaxed"></p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const cards = document.querySelectorAll('[data-calendar-day]');
            const detailDate = document.getElementById('day-detail-date');
            const detailStatus = document.getElementById('day-detail-status');
            const detailDescription = document.getElementById('day-detail-description');

            const statusColorMap = {
                'Present': 'text-green-600',
                'Late': 'text-yellow-600',
                'Early Checkout': 'text-blue-600',
                'Leave': 'text-blue-600',
                'Absent': 'text-red-600',
                'Pending': 'text-orange-600',
                'Weekend': 'text-gray-600',
                'Upcoming': 'text-sky-600'
            };

            function selectCard(card) {
                if (!card) {
                    return;
                }

                cards.forEach(c => c.classList.remove('ring-2', 'ring-offset-2', 'ring-blue-400'));
                card.classList.add('ring-2', 'ring-offset-2', 'ring-blue-400');

                const displayDate = card.getAttribute('data-display-date');
                const status = card.getAttribute('data-status');
                const description = card.getAttribute('data-description');

                detailDate.textContent = displayDate;
                detailStatus.textContent = status === 'Other Month' ? 'Outside selected month' : status;
                detailStatus.className = 'text-sm font-semibold ' + (statusColorMap[status] || 'text-gray-700');
                detailDescription.textContent = description && description.trim().length > 0
                    ? description
                    : 'No additional details.';
            }

            cards.forEach(card => {
                card.addEventListener('click', () => selectCard(card));
                card.addEventListener('keypress', (event) => {
                    if (event.key === 'Enter' || event.key === ' ') {
                        event.preventDefault();
                        selectCard(card);
                    }
                });
            });

            const preferredCard = Array.from(cards).find(card =>
                card.getAttribute('data-is-today') === 'true' &&
                card.getAttribute('data-is-current') === 'true');

            selectCard(preferredCard || cards[0]);
        });
    </script>
}
